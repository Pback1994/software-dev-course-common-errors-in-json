/*
===========================================
üè® JSON Syntax Debugging: Hotel Booking Data
===========================================

üéØ Objective:
Students will analyze a JSON file containing multiple syntax errors,
identify the issues, and correct them.

This activity helps practice spotting and fixing common JSON mistakes such as:
- Missing commas
- Incorrect use of quotation marks
- Unmatched brackets/braces
- Trailing commas
- Invalid data types
*/


// ============================================
// üß≠ Instructions:
// ============================================

/*
üìò Scenario:
You‚Äôre a developer on a team building a travel booking API.

A teammate submitted a JSON file to represent a hotel booking, 
but it contains multiple syntax errors that prevent it from being parsed.

üîß Your Task:
1Ô∏è‚É£ Review the provided JSON file
2Ô∏è‚É£ Identify all syntax errors
3Ô∏è‚É£ Write down what each error is and why it causes a problem
4Ô∏è‚É£ Correct the JSON structure so that it is valid
5Ô∏è‚É£ Validate your corrected version using a JSON linter or validator

üß™ Deliverables:
- A corrected version of the JSON
- A list of the corrections made and why each was necessary
*/


// ============================================
// üîç Provided JSON File with Errors
// ============================================


{
  "hotelName": "Grand City Hotel",
  "checkInDate": "2024-05-15",
  "checkOutDate": "2024-05-20",
  "guests": [
    {
      "name": "Alice Johnson",
      "age": 30,
      "email": "alice.johnson@example.com"
    },
    {
      "name": "Bob Smith",
      "age": null,
      "email": "bob.smith@example"
    }
  ],
  "roomDetails": {
    "type": "Suite",
    "pricePerNight": 200,
    "amenities": ["WiFi", "Breakfast", "Parking"]
  }
}


// ============================================
// ‚úÖ Requirements
// ============================================

/*
- Use a JSON validator or linter (e.g., https://jsonlint.com/) to test your final version
- Keep track of each fix:
  ‚Ä¢ What was wrong?

  - Line 47: JSON objects cannot be stored in variables. Removed the const invalidBookingJSON reference. 
  - Line 47: JSON cannot be formatted as a template literal, so removed reference to the template literal on both line 47 and 70. 
  - Line 50: Added comma on line 50 after "checkInDate": "2024-05-15". 
  - Line 54: Put quotes for the key name. 
  - Line 60: Replaced invalid data type of "undefined" w/ null. 
  - Line 67: removed the trailing comma after the "Parking" element in the array. 
  - Line 70: Removed semicolon at line 70. 

  ‚Ä¢ Why is it a problem in JSON?

    JSON follows strict syntax rules, which were broken by the above errors. 

  ‚Ä¢ What did you change to fix it?

    See above comments. 
*/


// ============================================
// ü§î Follow-Up Questions
// ============================================

/*
üí¨ Reflect and answer the following:

1Ô∏è‚É£ What tools or techniques did you use to identify the errors?

  - Code editor extension. 

2Ô∏è‚É£ How did you confirm that your corrected JSON file was valid?

  - Online Validator - Code Beautify. 

3Ô∏è‚É£ Which errors were the most difficult to spot? Why?

  - The invalid data type. Also, I had issues initially spotting that the JSON object was declared as a variable w/ a template 
  literal because I am so used to this syntax being valid for JavaScript objects and arrays. 

4Ô∏è‚É£ What strategies can help you avoid these kinds of errors in the future?
   (e.g., syntax highlighting, linters, writing JSON by example)

   - Following strict JSON syntax rules. 
   - Using online JSON validators. 
   - Reviewing error messages. 
*/
